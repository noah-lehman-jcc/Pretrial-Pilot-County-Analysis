USE DATABASE DWH_PROD;
USE ROLE QA_ANALYST;

/***** CREATE PUBLIC.PRETRIAL_COLUMN_NAMES *****/
CREATE OR REPLACE
TEMPORARY TABLE PUBLIC.PRETRIAL_COLUMN_NAMES (
     Source_File_Name VARCHAR,
     Load_Schema VARCHAR,
     Load_Table VARCHAR,
     Load_Column VARCHAR,
     Load_Schema_with_Table VARCHAR,
     Column_Ordinal_Position NUMBER,
     Data_Type VARCHAR,
     Contains_Date VARCHAR,
     JCC_Standarized_Column VARCHAR,
     OPERATION_TYPE_USE VARCHAR
);

/*********************************************/
/***** Load PUBLIC.PRETRIAL_COLUMN_NAMES *****/
/*********************************************/
INSERT INTO PUBLIC.PRETRIAL_COLUMN_NAMES
SELECT
     REPLACE(a.TABLE_NAME,'LD_','') AS Source_File_Name,
     a.TABLE_SCHEMA AS Load_Schema,
     a.TABLE_NAME AS Load_Table,
     a.COLUMN_NAME AS Load_Column,
     a.TABLE_SCHEMA || '.' || a.TABLE_NAME AS Load_Schema_with_Table,
     a.ORDINAL_POSITION AS Column_Ordinal_Position,
     a.DATA_TYPE AS Data_Type,
     CASE WHEN a.COLUMN_NAME LIKE '%_DATE' THEN 'Yes' ELSE 'No' END AS Contains_Date,
     COALESCE(b.STANDARIZED_COLUMN_NAME,'None') AS JCC_Standarized_Column,
     CASE
          WHEN a.TABLE_NAME IN ('LD_PRETRIAL_VPRAI_TOOL_RESPONSE', 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE', 'LD_PRETRIAL_PSA_TOOL_RESPONSES', 'LD_PRETRIAL_ORAS_TOOL_RESPONSES', 'LD_PRETRIAL_GENERIC_TOOL_RESPONSE')
               THEN 'No_OPERATION_TYPE_Column'
          WHEN a.TABLE_NAME LIKE 'LD_COURT_%'
               THEN 'OPERATION_TYPE_Column_Is_Used'
          ELSE 'OPERATION_TYPE_Column_Is_Not_Used'
     END AS OPERATION_TYPE_USE
FROM
     (
     SELECT
          TABLE_SCHEMA,
          TABLE_NAME,
          COLUMN_NAME,
          ORDINAL_POSITION,
          DATA_TYPE
     FROM
          INFORMATION_SCHEMA."COLUMNS"
     WHERE
          1 = 1
          AND TABLE_SCHEMA = 'LOAD'
          AND TABLE_NAME NOT LIKE '%_REJECT'
          AND TABLE_NAME NOT LIKE 'LD_REF%'
          AND TABLE_NAME NOT IN ( 'LD_COURT_CASE_TYPE_HIERARCHY', 'LD_COURT_CASE', 'LD_COURT_CASE_DISPOSITION', 'LD_COURT_CRIM_COURT_CONTROL', 'LD_COURT_EVENT', 'LD_COURT_DOCUMENT_FILING', 'LD_COURT_FL_CASE_PARTICIPANT' )
          AND COLUMN_NAME NOT LIKE '%_JCC_STANDARDIZED'
     GROUP BY
          TABLE_SCHEMA,
          TABLE_NAME,
          COLUMN_NAME,
          ORDINAL_POSITION,
          DATA_TYPE ) AS a
LEFT JOIN (
     SELECT
          TABLE_SCHEMA AS JOIN_SCHEMA_NAME,
          TABLE_NAME AS JOIN_TABLE_NAME,
          REPLACE(COLUMN_NAME,'_JCC_STANDARDIZED','') AS JOIN_COLUMN_NAME,
          COLUMN_NAME AS STANDARIZED_COLUMN_NAME
     FROM
          INFORMATION_SCHEMA."COLUMNS"
     WHERE
          1 = 1
          AND TABLE_SCHEMA = 'LOAD'
          AND TABLE_NAME NOT LIKE '%_REJECT'
          AND TABLE_NAME NOT LIKE 'LD_REF%'
          AND TABLE_NAME NOT IN ( 'LD_COURT_CASE_TYPE_HIERARCHY', 'LD_COURT_CASE', 'LD_COURT_CASE_DISPOSITION', 'LD_COURT_CRIM_COURT_CONTROL', 'LD_COURT_EVENT', 'LD_COURT_DOCUMENT_FILING', 'LD_COURT_FL_CASE_PARTICIPANT' )
          AND COLUMN_NAME LIKE '%_JCC_STANDARDIZED'
     GROUP BY
          TABLE_SCHEMA,
          TABLE_NAME,
          COLUMN_NAME ) AS b ON
     a.TABLE_SCHEMA = b.JOIN_SCHEMA_NAME
     AND a.TABLE_NAME = b.JOIN_TABLE_NAME
     AND a.COLUMN_NAME = b.JOIN_COLUMN_NAME
ORDER BY
     a.TABLE_SCHEMA,
     a.TABLE_NAME,
     a.ORDINAL_POSITION,
     a.DATA_TYPE;

/********************************************************************************/
/********************************************************************************/
/************************* JCC Primary Key Tests ********************************/
/********************************************************************************/
/********************************************************************************/

/************************************************/ 
/***** CREATE PUBLIC.PRETRIAL_COLUMN_CHECKS *****/
/************************************************/  
CREATE OR REPLACE
TEMPORARY TABLE PUBLIC.PRETRIAL_COLUMN_CHECKS (
     SOURCE_FILE_NAME VARCHAR,
     LOAD_SCHEMA VARCHAR,
     LOAD_TABLE VARCHAR,
     LOAD_COLUMN VARCHAR,
     DATA_TYPE VARCHAR,
     COLUMN_ORDINAL_POSITION NUMBER,
     CONTAINS_DATE VARCHAR,
     JCC_STANDARDIZED_COULMN VARCHAR,
     RECORD_CNT NUMBER,
     DISTINCT_VALUE_COUNT NUMBER,
     NOT_NULL_CNT NUMBER,
     NULL_CNT NUMBER
);

/******************************************************/ 
/***** Script to Create Primary Key Check Queries *****/
/******************************************************/ 
SELECT
     'SELECT ' || '''' || Source_File_Name || '''' || ' AS SOURCE_FILE_NAME, '
     || '''' || Load_Schema || '''' || ' AS LOAD_SCHEMA, '
     || '''' || Load_Table || '''' || ' AS LOAD_TABLE, '
     || '''' || Load_Column || '''' || ' AS LOAD_COLUMN, '
     || '''' || Data_Type || '''' || ' AS DATA_TYPE, '
     || '''' || Column_Ordinal_Position || '''' || ' AS COLUMN_ORDINAL_POSITION, ' 
     || '''' || Contains_Date || '''' || ' AS CONTAINS_DATE, '
     || '''' || JCC_Standarized_Column || '''' ||
     ' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ' || Load_Column ||
     ') AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ' || Load_Column ||
     ' IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ' || Load_Column || ' IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM '
     || Load_Schema_with_Table || ' WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> ''D'' ) UNION'
FROM
     PUBLIC.PRETRIAL_COLUMN_NAMES
WHERE OPERATION_TYPE_USE = 'OPERATION_TYPE_Column_Is_Used'
UNION
SELECT
     'SELECT ' || '''' || Source_File_Name || '''' || ' AS SOURCE_FILE_NAME, '
     || '''' || Load_Schema || '''' || ' AS LOAD_SCHEMA, '
     || '''' || Load_Table || '''' || ' AS LOAD_TABLE, '
     || '''' || Load_Column || '''' || ' AS LOAD_COLUMN, '
     || '''' || Data_Type || '''' || ' AS DATA_TYPE, '
     || '''' || Column_Ordinal_Position || '''' || ' AS COLUMN_ORDINAL_POSITION, ' 
     || '''' || Contains_Date || '''' || ' AS CONTAINS_DATE, '
     || '''' || JCC_Standarized_Column || '''' ||
     ' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ' || Load_Column ||
     ') AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ' || Load_Column ||
     ' IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ' || Load_Column || ' IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM '
     || Load_Schema_with_Table || ' UNION'
FROM
     PUBLIC.PRETRIAL_COLUMN_NAMES
WHERE OPERATION_TYPE_USE <> 'OPERATION_TYPE_Column_Is_Used'
     
/**********************************************/ 
/***** LOAD PUBLIC.PRETRIAL_COLUMN_CHECKS *****/
/**********************************************/  
INSERT INTO PUBLIC.PRETRIAL_COLUMN_CHECKS
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'INDIVIDUAL_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT INDIVIDUAL_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'COURT_CASE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CASE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CASE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CASE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'PUBLIC_CASE_NUMBER' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PUBLIC_CASE_NUMBER) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PUBLIC_CASE_NUMBER IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PUBLIC_CASE_NUMBER IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'CITATION_NUMBER' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CITATION_NUMBER) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CITATION_NUMBER IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CITATION_NUMBER IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'CASE_STATUS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'CASE_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_STATUS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_STATUS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_STATUS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'CASE_STATUS_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_STATUS_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_STATUS_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_STATUS_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'CASE_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'FILED_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILED_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILED_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILED_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'REPRESENTATION_STATUS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '14' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'REPRESENTATION_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT REPRESENTATION_STATUS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN REPRESENTATION_STATUS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN REPRESENTATION_STATUS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'SUB_DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'HAS_CHARGE_FLAG' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HAS_CHARGE_FLAG) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HAS_CHARGE_FLAG IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HAS_CHARGE_FLAG IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'DOCUMENT_FILING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DOCUMENT_FILING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DOCUMENT_FILING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DOCUMENT_FILING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'FILING_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'FILING_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILING_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILING_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILING_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'FILING_PARTY_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILING_PARTY_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILING_PARTY_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILING_PARTY_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'BOOKING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'PRETRIAL_INELIGIBLE_REASON' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_INELIGIBLE_REASON) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_INELIGIBLE_REASON IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_INELIGIBLE_REASON IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'CASE_STATUS_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_STATUS_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_STATUS_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_STATUS_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'CASE_CHARGE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_CHARGE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_DESCRIPTION_LITERAL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_DESCRIPTION_LITERAL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_DESCRIPTION_LITERAL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_DESCRIPTION_LITERAL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_NUMBER' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_NUMBER) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_NUMBER IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_NUMBER IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'PLEA_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PLEA_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PLEA_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PLEA_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '16' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'COURT_CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_STATUS_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_STATUS_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_STATUS_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_STATUS_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'COURT_RELEASE_DECISION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '16' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'COURT_RELEASE_DECISION_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_RELEASE_DECISION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_RELEASE_DECISION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_RELEASE_DECISION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'LAST_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LAST_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LAST_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LAST_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'FBI' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FBI) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FBI IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FBI IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'LOCAL_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LOCAL_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LOCAL_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LOCAL_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'ETHNICITY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '16' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ETHNICITY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ETHNICITY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ETHNICITY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_EVENT_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_EVENT_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_EVENT_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_EVENT_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'SUB_DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'HEARING_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_DURATION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_DURATION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_DURATION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_DURATION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_RESULT_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '14' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_RESULT_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_RESULT_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_RESULT_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '16' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'FILING_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILING_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILING_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILING_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'FILING_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILING_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILING_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILING_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'FILING_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FILING_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FILING_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FILING_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CRIMINAL_DOCUMENT_FILING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CRIMINAL_DOCUMENT_FILING' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CRIMINAL_DOCUMENT_FILING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_LEVEL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_LEVEL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_LEVEL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_HIERARCHY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_HIERARCHY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_HIERARCHY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_HIERARCHY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'PLEA_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'PLEA_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PLEA_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PLEA_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PLEA_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'PLEA_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PLEA_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PLEA_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PLEA_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'PLEA_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '14' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PLEA_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PLEA_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PLEA_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_CHARGE_CURRENT_VERSION_FLAG' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '15' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_CHARGE_CURRENT_VERSION_FLAG) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_CHARGE_CURRENT_VERSION_FLAG IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_CHARGE_CURRENT_VERSION_FLAG IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'DISPOSITION_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DISPOSITION_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DISPOSITION_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DISPOSITION_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'SUB_DISPOSITION_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SUB_DISPOSITION_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SUB_DISPOSITION_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_STATUS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'HEARING_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_STATUS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_STATUS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_STATUS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_STATUS_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_STATUS_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_STATUS_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_STATUS_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_RESULT_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '15' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_RESULT_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_RESULT_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_RESULT_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'COURT_RELEASE_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '18' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'COURT_RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_RELEASE_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_RELEASE_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_RELEASE_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '20' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'INDIVIDUAL_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT INDIVIDUAL_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'CII' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CII) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CII IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CII IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'FIRST_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FIRST_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FIRST_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FIRST_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'ZIP_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ZIP_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ZIP_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ZIP_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'CDL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CDL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CDL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CDL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'SEX' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'SEX_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SEX) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SEX IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SEX IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_EVENT_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_EVENT_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_EVENT_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_EVENT_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_TYPE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_TYPE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_TYPE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_TYPE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_TYPE_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_TYPE_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_TYPE_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_TYPE_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'WARRANT_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'WARRANT_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT WARRANT_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN WARRANT_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN WARRANT_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'WARRANT_STATUS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'WARRANT_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT WARRANT_STATUS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN WARRANT_STATUS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN WARRANT_STATUS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'WARRANT_ISSUANCE_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT WARRANT_ISSUANCE_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN WARRANT_ISSUANCE_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN WARRANT_ISSUANCE_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_HEARING' AS LOAD_TABLE, 'HEARING_RESULT' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'HEARING_RESULT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HEARING_RESULT) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HEARING_RESULT IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HEARING_RESULT IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'PERSON_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PERSON_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PERSON_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PERSON_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'MIDDLE_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT MIDDLE_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN MIDDLE_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN MIDDLE_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'DOB' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DOB) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DOB IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DOB IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'RACE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '14' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RACE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RACE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RACE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RACE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'LANGUAGE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '18' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LANGUAGE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LANGUAGE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LANGUAGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_INDIVIDUAL' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '20' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'SENTENCE_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'SENTENCE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SENTENCE_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SENTENCE_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SENTENCE_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'WARRANT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT WARRANT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN WARRANT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN WARRANT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'WARRANT_REASON' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'WARRANT_REASON_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT WARRANT_REASON) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN WARRANT_REASON IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN WARRANT_REASON IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'FIRST_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FIRST_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FIRST_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FIRST_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'LAST_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LAST_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LAST_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LAST_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_WARRANT' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CASE_CHARGE' AS LOAD_TABLE, 'COURT_SPECIAL_ALLEGATION_NUMBER' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_SPECIAL_ALLEGATION_NUMBER) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_SPECIAL_ALLEGATION_NUMBER IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_SPECIAL_ALLEGATION_NUMBER IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_CHARGE_DISPOSITION' AS LOAD_TABLE, 'CASE_CHARGE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_CHARGE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'MIDDLE_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT MIDDLE_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN MIDDLE_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN MIDDLE_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_COURT_SENTENCE' AS LOAD_TABLE, 'CASE_CHARGE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_CHARGE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_CHARGE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'ZIP_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ZIP_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ZIP_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ZIP_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'FBI' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT FBI) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN FBI IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN FBI IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'LOCAL_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LOCAL_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LOCAL_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LOCAL_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'CDL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CDL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CDL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CDL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'DOB' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT DOB) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN DOB IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN DOB IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'SEX' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'SEX_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SEX) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SEX IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SEX IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'RACE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '13' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RACE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RACE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RACE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RACE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'ETHNICITY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '15' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ETHNICITY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ETHNICITY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ETHNICITY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'LANGUAGE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '17' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LANGUAGE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LANGUAGE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LANGUAGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '19' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'BOOKING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'INDIVIDUAL_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT INDIVIDUAL_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_MONITORING_START_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_MONITORING_START_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_MONITORING_START_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_MONITORING_START_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_TERMINATION_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_TERMINATION_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_TERMINATION_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_TERMINATION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'TOOL_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TOOL_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TOOL_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TOOL_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'GENERIC_TOOL_NAME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT GENERIC_TOOL_NAME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN GENERIC_TOOL_NAME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN GENERIC_TOOL_NAME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'GENERIC_TOOL_TOTAL_SCORE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT GENERIC_TOOL_TOTAL_SCORE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN GENERIC_TOOL_TOTAL_SCORE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN GENERIC_TOOL_TOTAL_SCORE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'ASSESSMENT_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ASSESSMENT_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ASSESSMENT_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ASSESSMENT_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_TERMINATION_OUTCOME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'PRETRIAL_TERMINATION_OUTCOME_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_TERMINATION_OUTCOME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_TERMINATION_OUTCOME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_TERMINATION_OUTCOME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_TERMINATION_REASON' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'PRETRIAL_TERMINATION_REASON_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_TERMINATION_REASON) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_TERMINATION_REASON IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_TERMINATION_REASON IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'RELEASE_RECOMMENDATION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '14' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RELEASE_RECOMMENDATION_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_RECOMMENDATION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_RECOMMENDATION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_RECOMMENDATION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'RELEASE_DECISION_PREARRAIGNMENT' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '16' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RELEASE_DECISION_PREARRAIGNMENT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_DECISION_PREARRAIGNMENT) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_DECISION_PREARRAIGNMENT IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_DECISION_PREARRAIGNMENT IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'RELEASE_DECISION_ARRAIGNMENT' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '18' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RELEASE_DECISION_ARRAIGNMENT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_DECISION_ARRAIGNMENT) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_DECISION_ARRAIGNMENT IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_DECISION_ARRAIGNMENT IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'PRETRIAL_RELEASE_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '20' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'PRETRIAL_RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_RELEASE_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_RELEASE_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_RELEASE_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'RISK_LEVEL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '22' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RISK_LEVEL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RISK_LEVEL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RISK_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'MONITORING_LEVEL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '23' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT MONITORING_LEVEL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN MONITORING_LEVEL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN MONITORING_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'COURT_DATE_REMINDER_FLAG' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '24' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT COURT_DATE_REMINDER_FLAG) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN COURT_DATE_REMINDER_FLAG IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN COURT_DATE_REMINDER_FLAG IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ASSESSMENT' AS LOAD_TABLE, 'TRANSIT_SERVICE_FLAG' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '25' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TRANSIT_SERVICE_FLAG) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TRANSIT_SERVICE_FLAG IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TRANSIT_SERVICE_FLAG IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT UNION
SELECT 'BOOKING_CASE_LINK' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_BOOKING_CASE_LINK' AS LOAD_TABLE, 'BOOKING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_BOOKING_CASE_LINK UNION
SELECT 'BOOKING_CASE_LINK' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_BOOKING_CASE_LINK' AS LOAD_TABLE, 'CASE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CASE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CASE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CASE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_BOOKING_CASE_LINK UNION
SELECT 'BOOKING_CASE_LINK' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_BOOKING_CASE_LINK' AS LOAD_TABLE, 'BOOKING_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_BOOKING_CASE_LINK UNION
SELECT 'BOOKING_CASE_LINK' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_BOOKING_CASE_LINK' AS LOAD_TABLE, 'BOOKING_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_BOOKING_CASE_LINK UNION
SELECT 'BOOKING_CASE_LINK' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_BOOKING_CASE_LINK' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_BOOKING_CASE_LINK UNION
SELECT 'PRETRIAL_RELEASE_CONDITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_RELEASE_CONDITION' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_RELEASE_CONDITION UNION
SELECT 'PRETRIAL_RELEASE_CONDITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_RELEASE_CONDITION' AS LOAD_TABLE, 'RELEASE_CONDITION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_CONDITION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_CONDITION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_CONDITION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_RELEASE_CONDITION UNION
SELECT 'PRETRIAL_RELEASE_CONDITION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_RELEASE_CONDITION' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_RELEASE_CONDITION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'PRETRIAL_VIOLATION_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_VIOLATION_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_VIOLATION_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_VIOLATION_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'PRETRIAL_VIOLATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_VIOLATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_VIOLATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_VIOLATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'PRETRIAL_VIOLATION_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_VIOLATION_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_VIOLATION_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_VIOLATION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'PRETRIAL_VIOLATION_OUTCOME' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_VIOLATION_OUTCOME) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_VIOLATION_OUTCOME IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_VIOLATION_OUTCOME IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VIOLATION' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VIOLATION UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'VPRAIR_TOOL_RESPONSES_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT VPRAIR_TOOL_RESPONSES_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN VPRAIR_TOOL_RESPONSES_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN VPRAIR_TOOL_RESPONSES_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'ACTIVE_COMMUNITY_CRIMINAL_JUSTICE_SUPERVISION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ACTIVE_COMMUNITY_CRIMINAL_JUSTICE_SUPERVISION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ACTIVE_COMMUNITY_CRIMINAL_JUSTICE_SUPERVISION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ACTIVE_COMMUNITY_CRIMINAL_JUSTICE_SUPERVISION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'CURRENT_CHARGE_IS_FELONY_DRUG_FELONY_THEFT_OR_FELONY_FRAUD' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CURRENT_CHARGE_IS_FELONY_DRUG_FELONY_THEFT_OR_FELONY_FRAUD) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CURRENT_CHARGE_IS_FELONY_DRUG_FELONY_THEFT_OR_FELONY_FRAUD IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CURRENT_CHARGE_IS_FELONY_DRUG_FELONY_THEFT_OR_FELONY_FRAUD IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'PENDING_CHARGE_AT_TIME_OF_ARREST' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PENDING_CHARGE_AT_TIME_OF_ARREST) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PENDING_CHARGE_AT_TIME_OF_ARREST IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PENDING_CHARGE_AT_TIME_OF_ARREST IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'ONE_OR_MORE_ADULT_CRIMINAL_CONVICTIONS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ONE_OR_MORE_ADULT_CRIMINAL_CONVICTIONS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ONE_OR_MORE_ADULT_CRIMINAL_CONVICTIONS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ONE_OR_MORE_ADULT_CRIMINAL_CONVICTIONS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'TWO_OR_MORE_FTAS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TWO_OR_MORE_FTAS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TWO_OR_MORE_FTAS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TWO_OR_MORE_FTAS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'TWO_OR_MORE_VIOLENT_CONVICTIONS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TWO_OR_MORE_VIOLENT_CONVICTIONS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TWO_OR_MORE_VIOLENT_CONVICTIONS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TWO_OR_MORE_VIOLENT_CONVICTIONS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'UNEMPLOYED_AT_THE_TIME_OF_ARREST' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT UNEMPLOYED_AT_THE_TIME_OF_ARREST) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN UNEMPLOYED_AT_THE_TIME_OF_ARREST IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN UNEMPLOYED_AT_THE_TIME_OF_ARREST IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'HISTORY_OF_DRUG_ABUSE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HISTORY_OF_DRUG_ABUSE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HISTORY_OF_DRUG_ABUSE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HISTORY_OF_DRUG_ABUSE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAIR_TOOL_RESPONSE' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'VPRAI_TOOL_RESPONSES_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT VPRAI_TOOL_RESPONSES_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN VPRAI_TOOL_RESPONSES_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN VPRAI_TOOL_RESPONSES_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'CHARGE_TYPE_FELONY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CHARGE_TYPE_FELONY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CHARGE_TYPE_FELONY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CHARGE_TYPE_FELONY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'PENDING_CHARGE_AT_TIME_OF_ARREST' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PENDING_CHARGE_AT_TIME_OF_ARREST) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PENDING_CHARGE_AT_TIME_OF_ARREST IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PENDING_CHARGE_AT_TIME_OF_ARREST IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'TWO_OR_MORE_FTAS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TWO_OR_MORE_FTAS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TWO_OR_MORE_FTAS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TWO_OR_MORE_FTAS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'TWO_OR_MORE_VIOLENT_CONVICTIONS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TWO_OR_MORE_VIOLENT_CONVICTIONS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TWO_OR_MORE_VIOLENT_CONVICTIONS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TWO_OR_MORE_VIOLENT_CONVICTIONS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'NOT_EMPLOYED_FOR_TWO_YEARS_PRIOR_TO_ARREST' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT NOT_EMPLOYED_FOR_TWO_YEARS_PRIOR_TO_ARREST) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN NOT_EMPLOYED_FOR_TWO_YEARS_PRIOR_TO_ARREST IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN NOT_EMPLOYED_FOR_TWO_YEARS_PRIOR_TO_ARREST IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'HISTORY_OF_DRUG_ABUSE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT HISTORY_OF_DRUG_ABUSE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN HISTORY_OF_DRUG_ABUSE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN HISTORY_OF_DRUG_ABUSE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'SCORE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '11' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SCORE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SCORE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SCORE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_VPRAI_TOOL_RESPONSE' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '12' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'INDIVIDUAL_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT INDIVIDUAL_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'BOOKING_ID' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_ID) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_ID IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_ID IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'BOOKING_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'BOOKING_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'ARREST_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ARREST_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ARREST_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ARREST_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'RELEASE_DATE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'Yes' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_DATE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_DATE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING' AS LOAD_TABLE, 'RELEASE_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '9' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RELEASE_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RELEASE_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RELEASE_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING_CHARGE' AS LOAD_TABLE, 'BOOKING_CHARGE_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_CHARGE_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_CHARGE_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_CHARGE_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING_CHARGE' AS LOAD_TABLE, 'BOOKING_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING_CHARGE' AS LOAD_TABLE, 'BOOKING_CHARGE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_CHARGE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_CHARGE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_CHARGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING_CHARGE' AS LOAD_TABLE, 'BOOKING_CHARGE_CODE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'BOOKING_CHARGE_CODE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_CHARGE_CODE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_CHARGE_CODE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_CHARGE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_BOOKING_CHARGE' AS LOAD_TABLE, 'BOOKING_CHARGE_LEVEL' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '6' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'BOOKING_CHARGE_LEVEL_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT BOOKING_CHARGE_LEVEL) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN BOOKING_CHARGE_LEVEL IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN BOOKING_CHARGE_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_JAIL_INDIVIDUAL' AS LOAD_TABLE, 'INDIVIDUAL_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT INDIVIDUAL_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN INDIVIDUAL_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_JAIL_INDIVIDUAL UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_INDIVIDUAL' AS LOAD_TABLE, 'ETHNICITY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '15' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ETHNICITY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ETHNICITY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ETHNICITY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_INDIVIDUAL' AS LOAD_TABLE, 'LANGUAGE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '17' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT LANGUAGE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN LANGUAGE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN LANGUAGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_INDIVIDUAL' AS LOAD_TABLE, 'OPERATION_TYPE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '19' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT OPERATION_TYPE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN OPERATION_TYPE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN OPERATION_TYPE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'ORAS_TOOL_RESPONSES_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ORAS_TOOL_RESPONSES_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ORAS_TOOL_RESPONSES_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ORAS_TOOL_RESPONSES_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'PRETRIAL_ASSESSMENT_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '2' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRETRIAL_ASSESSMENT_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRETRIAL_ASSESSMENT_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'AGE_AT_FIRST_ARREST' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '3' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT AGE_AT_FIRST_ARREST) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN AGE_AT_FIRST_ARREST IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN AGE_AT_FIRST_ARREST IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'TOTAL_FTA_WARRANTS_PREVIOUS_24_MONTHS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT TOTAL_FTA_WARRANTS_PREVIOUS_24_MONTHS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN TOTAL_FTA_WARRANTS_PREVIOUS_24_MONTHS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN TOTAL_FTA_WARRANTS_PREVIOUS_24_MONTHS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'THREE_OR_MORE_PRIOR_JAIL_INCARCERATIONS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '5' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT THREE_OR_MORE_PRIOR_JAIL_INCARCERATIONS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN THREE_OR_MORE_PRIOR_JAIL_INCARCERATIONS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN THREE_OR_MORE_PRIOR_JAIL_INCARCERATIONS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'RESIDENTIAL_STABILITY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT RESIDENTIAL_STABILITY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN RESIDENTIAL_STABILITY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN RESIDENTIAL_STABILITY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'ILLEGAL_DRUG_USE_PREVIOUS_6_MONTHS' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '8' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT ILLEGAL_DRUG_USE_PREVIOUS_6_MONTHS) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN ILLEGAL_DRUG_USE_PREVIOUS_6_MONTHS IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN ILLEGAL_DRUG_USE_PREVIOUS_6_MONTHS IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_PSA_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_PSA_TOOL_RESPONSE' AS LOAD_TABLE, 'PSA_TOOL_RESPONSES_KEY' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '1' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PSA_TOOL_RESPONSES_KEY) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PSA_TOOL_RESPONSES_KEY IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PSA_TOOL_RESPONSES_KEY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_PSA_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_ORAS_TOOL_RESPONSE' AS LOAD_TABLE, 'SCORE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT SCORE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN SCORE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN SCORE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_PSA_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_PSA_TOOL_RESPONSE' AS LOAD_TABLE, 'CURRENT_VIOLENT_OFFENSE' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '4' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT CURRENT_VIOLENT_OFFENSE) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN CURRENT_VIOLENT_OFFENSE IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN CURRENT_VIOLENT_OFFENSE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_PSA_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_PSA_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_PSA_TOOL_RESPONSE' AS LOAD_TABLE, 'PRIOR_MISDEMEANOR_CONVICTION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '7' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRIOR_MISDEMEANOR_CONVICTION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRIOR_MISDEMEANOR_CONVICTION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRIOR_MISDEMEANOR_CONVICTION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_PSA_TOOL_RESPONSE UNION
SELECT 'PRETRIAL_PSA_TOOL_RESPONSE' AS SOURCE_FILE_NAME, 'LOAD' AS LOAD_SCHEMA, 'LD_PRETRIAL_PSA_TOOL_RESPONSE' AS LOAD_TABLE, 'PRIOR_VIOLENT_CONVICTION' AS LOAD_COLUMN, 'TEXT' AS DATA_TYPE, '10' AS COLUMN_ORDINAL_POSITION, 'No' AS CONTAINS_DATE, 'None' AS JCC_STANDARDIZED_COULMN, COUNT(*) AS RECORD_CNT, COUNT(DISTINCT PRIOR_VIOLENT_CONVICTION) AS DISTINCT_VALUE_COUNT, SUM(CASE WHEN PRIOR_VIOLENT_CONVICTION IS NOT NULL THEN 1 ELSE 0 END) AS NOT_NULL_CNT, SUM(CASE WHEN PRIOR_VIOLENT_CONVICTION IS NULL THEN 1 ELSE 0 END) AS NULL_CNT FROM LOAD.LD_PRETRIAL_PSA_TOOL_RESPONSE
/*******************************************************/ 
/***** CREATE PUBLIC.PRETRIAL_COLUMN_CHECK_RESULTS *****/
/*******************************************************/  
CREATE OR REPLACE
TEMPORARY TABLE PUBLIC.PRETRIAL_COLUMN_CHECK_RESULTS (
     SOURCE_FILE_NAME VARCHAR,
     LOAD_SCHEMA VARCHAR,
     LOAD_TABLE VARCHAR,
     LOAD_COLUMN VARCHAR,
     DATA_TYPE VARCHAR,
     COLUMN_ORDINAL_POSITION NUMBER,
     CONTAINS_DATE VARCHAR,
     JCC_STANDARDIZED_COULMN VARCHAR,
     RECORD_CNT NUMBER,
     DISTINCT_VALUE_COUNT NUMBER,
     NOT_NULL_CNT NUMBER,
     NULL_CNT NUMBER,
     PCT_NOT_NULL NUMBER,
     PCT_NULL NUMBER
);

/*****************************************************/ 
/***** LOAD PUBLIC.PRETRIAL_COLUMN_CHECK_RESULTS *****/
/*****************************************************/  
INSERT INTO PUBLIC.PRETRIAL_COLUMN_CHECK_RESULTS
SELECT
     SOURCE_FILE_NAME,
     LOAD_SCHEMA,
     LOAD_TABLE,
     LOAD_COLUMN,
     DATA_TYPE,
     COLUMN_ORDINAL_POSITION,
     CONTAINS_DATE,
     JCC_STANDARDIZED_COULMN,
     RECORD_CNT,
     DISTINCT_VALUE_COUNT,
     NOT_NULL_CNT,
     NULL_CNT,
     CAST((NOT_NULL_CNT / RECORD_CNT ) * 100.00 AS NUMBER(38,4)) AS PCT_NOT_NULL,
     CAST((NULL_CNT / RECORD_CNT ) * 100.00 AS NUMBER(38,4)) AS PCT_NULL
FROM
     PUBLIC.PRETRIAL_COLUMN_CHECKS
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_SCHEMA,
     LOAD_TABLE,
     LOAD_COLUMN;

/****************************************************************/ 
/***** Script to get Primary Key Uniqueness Testing Results *****/
/****************************************************************/ 
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     RECORD_CNT,
     DISTINCT_VALUE_COUNT,
     NULL_CNT,
     PCT_NULL,
     CASE
          WHEN RECORD_CNT = DISTINCT_VALUE_COUNT THEN 'Pass'
          ELSE 'Fail'
     END AS TEST_RESULT,
     CASE
          WHEN RECORD_CNT = 0 THEN 'Yes'
          ELSE 'No'
     END AS EMPTY_TABLE
FROM
     PUBLIC.PRETRIAL_COLUMN_CHECK_RESULTS
WHERE
     COLUMN_ORDINAL_POSITION = 1
     AND SOURCE_FILE_NAME NOT IN ('BOOKING_CASE_LINK','PRETRIAL_BOOKING_LINK','PRETRIAL_CASE_LINK')
   ORDER BY
     SOURCE_FILE_NAME,
     COLUMN_ORDINAL_POSITION
     
/****************************************************************************
*******************Foreign Key Test*******************************************/

--USE DATABASE DWH_DEV;
/***** Key Integrity Test ******/
SELECT
     'COURT_CHARGE_DISPOSITION' AS Source_Table,
     'COURT_CASE_CHARGE' AS Target_Table,
     'CASE_CHARGE_KEY' AS Source_Key,
     'CASE_CHARGE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_CHARGE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CHARGE_DISPOSITION
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               CASE_CHARGE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'COURT_SENTENCE' AS Source_Table,
     'COURT_CASE_CHARGE' AS Target_Table,
     'CASE_CHARGE_KEY' AS Source_Key,
     'CASE_CHARGE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_CHARGE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_SENTENCE
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               CASE_CHARGE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'JAIL_BOOKING' AS SOURCE_TABLE,
     'JAIL_INDIVIDUAL' AS TARGET_TABLE,
     'INDIVIDUAL_KEY' AS SOURCE_KEY,
     'INDIVIDUAL_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               INDIVIDUAL_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               INDIVIDUAL_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_INDIVIDUAL
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_TABLE,
     'COURT_INDIVIDUAL' AS TARGET_TABLE,
     'INDIVIDUAL_KEY' AS SOURCE_KEY,
     'INDIVIDUAL_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               INDIVIDUAL_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               INDIVIDUAL_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_INDIVIDUAL
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne 

UNION
SELECT
     'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_TABLE,
     'JAIL_BOOKING' AS TARGET_TABLE,
     'BOOKING_KEY' AS SOURCE_KEY,
     'BOOKING_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'JAIL_BOOKING_CHARGE' AS SOURCE_TABLE,
     'JAIL_BOOKING' AS TARGET_TABLE,
     'BOOKING_KEY' AS SOURCE_KEY,
     'BOOKING_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_BOOKING_CHARGE
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_ASSESSMENT' AS SOURCE_TABLE,
     'JAIL_BOOKING' AS TARGET_TABLE,
     'BOOKING_KEY' AS SOURCE_KEY,
     'BOOKING_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               BOOKING_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne

UNION
SELECT
     'COURT_CASE_CHARGE' AS Source_Table,
     'COURT_CRIMINAL_CASE_DEFENDANT' AS Target_Table,
     'CASE_KEY' AS Source_Key,
     'COURT_CASE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               COURT_CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne

UNION
 SELECT
     'COURT_DOCUMENT_FILING' AS Source_Table,
     'COURT_CRIMINAL_CASE_DEFENDANT' AS Target_Table,
     'CASE_KEY' AS Source_Key,
     'COURT_CASE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_DOCUMENT_FILING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               COURT_CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne

UNION
SELECT
     'COURT_HEARING' AS Source_Table,
     'COURT_CRIMINAL_CASE_DEFENDANT' AS Target_Table,
     'CASE_KEY' AS Source_Key,
     'COURT_CASE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_HEARING
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               COURT_CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'COURT_WARRANT' AS Source_Table,
     'COURT_CRIMINAL_CASE_DEFENDANT' AS Target_Table,
     'CASE_KEY' AS Source_Key,
     'COURT_CASE_KEY' AS Target_Key,
     COUNT(*) AS Count_of_Source_Keys_Missing_in_Target,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS Test_Result
FROM
     (
          SELECT
               CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_WARRANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               COURT_CASE_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_RELEASE_CONDITION' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_RELEASE_CONDITION
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_VIOLATION' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_VIOLATION
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_GENERIC_TOOL_RESPONSE' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_GENERIC_TOOL_RESPONSE
          
              
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_ORAS_TOOL_RESPONSE' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ORAS_TOOL_RESPONSE
          
              
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
--USE DATABASE DWH_DEV;
SELECT
     'PRETRIAL_PSA_TOOL_RESPONSE' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_PSA_TOOL_RESPONSE
          
              
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_VPRAIR_TOOL_RESPONSE' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_VPRAIR_TOOL_RESPONSE
          
              
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne
UNION
SELECT
     'PRETRIAL_VPRAI_TOOL_RESPONSE' AS SOURCE_TABLE,
     'PRETRIAL_ASSESSMENT' AS TARGET_TABLE,
     'PRETRIAL_ASSESSMENT_KEY' AS SOURCE_KEY,
     'PRETRIAL_ASSESSMENT_KEY' AS TARGET_KEY,
     COUNT(*) AS MISSING_KEY_COUNT,
     CASE WHEN COUNT(*) > 0 THEN 'Fail' ELSE 'Pass' END AS TEST_RESULT
FROM
     (
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_VPRAI_TOOL_RESPONSE
          
              
     EXCEPT
          SELECT
               PRETRIAL_ASSESSMENT_KEY AS LOAD_COLUMN_VALUE
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE
               (
                    OPERATION_TYPE IS NULL
                    OR OPERATION_TYPE <> 'D'
               )
     ) AS TempOne

ORDER BY SOURCE_TABLE;

 
/********************************************************************************/
/********************************************************************************/
/************************* NULL Date Value Tests ********************************/
/********************************************************************************/
/********************************************************************************/

/*********************************************************/ 
/***** Script to get NULL Date Value Testing Results *****/
/*********************************************************/      

SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     RECORD_CNT,
     DISTINCT_DATES,
     NULL_CNT,
     CASE
          WHEN NULL_CNT = 0 THEN 'Pass'
          ELSE 'Unexpected NULL'
     END AS TEST_RESULT
FROM
     (
          SELECT
               'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME,
               'DISPOSITION_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT DISPOSITION_DATE) AS DISTINCT_DATES,
               SUM(CASE WHEN DISPOSITION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CHARGE_DISPOSITION
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
          
     UNION
          SELECT
               'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME,
               'FILED_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT FILED_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN FILED_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'COURT_HEARING' AS SOURCE_FILE_NAME,
               'HEARING_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT HEARING_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN HEARING_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_HEARING
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'COURT_SENTENCE' AS SOURCE_FILE_NAME,
               'SENTENCE_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT SENTENCE_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN SENTENCE_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_SENTENCE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'COURT_WARRANT' AS SOURCE_FILE_NAME,
               'WARRANT_ISSUANCE_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT WARRANT_ISSUANCE_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN WARRANT_ISSUANCE_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_WARRANT
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'JAIL_BOOKING' AS SOURCE_FILE_NAME,
               'BOOKING_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT BOOKING_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN BOOKING_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'JAIL_BOOKING' AS SOURCE_FILE_NAME,
               'ARREST_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT ARREST_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN ARREST_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_BOOKING
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME,
               'ASSESSMENT_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT ASSESSMENT_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN ASSESSMENT_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_PRETRIAL_ASSESSMENT
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME,
               'PRETRIAL_VIOLATION_DATE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT PRETRIAL_VIOLATION_DATE) AS DISTINCT_VALUES,
               SUM(CASE WHEN PRETRIAL_VIOLATION_DATE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_PRETRIAL_VIOLATION
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     ) AS TempOne
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN;









/********************************************************************************/
/********************************************************************************/
/*********************** Realistic Date Value Tests *****************************/
/********************************************************************************/
/********************************************************************************/

/**************************************************************/ 
/***** Script to get Realistic Date Value Testing Results *****/
/**************************************************************/
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     SUBMITTED_DATE,
     DATE_COUNT,
     TEST_RESULT
FROM
     (
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     SUBMITTED_DATE,
     DATE_COUNT,
     CASE
     	WHEN SUBMITTED_DATE='NULL' OR SUBMITTED_DATE IS NULL OR SUBMITTED_DATE = '' THEN 'Pass' 
     	WHEN SUBMITTED_DATE='*Valid Dates*' THEN 'Pass'
     	ELSE 'Unexpected Dates'
     END AS TEST_RESULT,
     DENSE_RANK() OVER (PARTITION BY SOURCE_FILE_NAME, LOAD_COLUMN, TEST_RESULT ORDER BY DATE_COUNT DESC, SUBMITTED_DATE DESC) AS RNK
FROM
     (
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     CASE
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'No' THEN '*Valid Dates*'
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'Yes' THEN '*Out of Range Dates*'
          
          ELSE SUBMITTED_DATE_VALUE_FIRST_10
     END AS SUBMITTED_DATE,
     SUM(DATE_COUNT) AS DATE_COUNT,
     CASE
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'No' THEN 'Pass'
          ELSE 'Fail'
     END AS TEST_RESULT
FROM
     (
          SELECT
               SOURCE_FILE_NAME,
               LOAD_COLUMN,
               LEFT(
                    SUBMITTED_DATE_VALUE,
                    10
               ) AS SUBMITTED_DATE_VALUE_FIRST_10,
               STANDARDIZED_DATE,
               SUM(DATE_COUNT) AS DATE_COUNT,
               CASE
                    WHEN STANDARDIZED_DATE IS NOT NULL
                        THEN 'Yes'
                    ELSE 'No'
               END AS VALID_DATE,
               CASE
                    WHEN STANDARDIZED_DATE < '2015-01-01' OR 
                    STANDARDIZED_DATE > TRY_TO_DATE(CAST((YEAR(CURRENT_DATE()) + 1) AS VARCHAR) || '-12-31') THEN 'Yes'
                    ELSE 'No'
               END AS VALID_DATE_OUT_OF_RANGE,
               CASE
                    WHEN LEFT(
                         SUBMITTED_DATE_VALUE,
                         10
                    ) IS NULL THEN 'Yes'
                    ELSE 'No'
               END AS NULL_DATE,
               CASE
                    WHEN STANDARDIZED_DATE IS NULL
                    AND LEFT(
                         SUBMITTED_DATE_VALUE,
                         10
                    ) IS NOT NULL THEN 'Yes'
                    ELSE 'No'
               END AS INVALID_DATE
          FROM
          (
          SELECT
               SOURCE_FILE_NAME,
               LOAD_COLUMN,
               SUBMITTED_DATE_VALUE,
               COALESCE(
                    STANDARDIZED_DATE_01,
                    STANDARDIZED_DATE_02,
                    STANDARDIZED_DATE_03,
                    STANDARDIZED_DATE_04,
                    STANDARDIZED_DATE_05,
                    STANDARDIZED_DATE_06,
                    STANDARDIZED_DATE_07,
                    STANDARDIZED_DATE_08,
                    STANDARDIZED_DATE_09,
                    STANDARDIZED_DATE_10,
                    STANDARDIZED_DATE_11,
                    STANDARDIZED_DATE_12,
                    STANDARDIZED_DATE_13,
                    STANDARDIZED_DATE_14,
                    STANDARDIZED_DATE_15,
                    STANDARDIZED_DATE_16,
                    STANDARDIZED_DATE_17,
                    STANDARDIZED_DATE_18,
                    STANDARDIZED_DATE_19,
                    STANDARDIZED_DATE_20,
                    STANDARDIZED_DATE_21,
                    STANDARDIZED_DATE_22,
                    STANDARDIZED_DATE_23,
                    STANDARDIZED_DATE_24,
                    STANDARDIZED_DATE_25,
                    STANDARDIZED_DATE_26,
                    STANDARDIZED_DATE_27,
                    STANDARDIZED_DATE_28,
                    STANDARDIZED_DATE_29,
                    STANDARDIZED_DATE_30,
                    STANDARDIZED_DATE_31,
                    STANDARDIZED_DATE_32            
               ) AS STANDARDIZED_DATE,
               SUM(DATE_COUNT) AS DATE_COUNT
               FROM
               (
                    SELECT
                         'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME,
                         'PLEA_DATE' AS LOAD_COLUMN,
                         PLEA_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(PLEA_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(PLEA_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(PLEA_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(PLEA_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,   
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_CASE_CHARGE
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         PLEA_DATE
               UNION
                    SELECT
                         'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME,
                         'DISPOSITION_DATE' AS LOAD_COLUMN,
                         DISPOSITION_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(DISPOSITION_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(DISPOSITION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(DISPOSITION_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(DISPOSITION_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_CHARGE_DISPOSITION
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         DISPOSITION_DATE
               UNION
                    SELECT
                         'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME,
                         'FILED_DATE' AS LOAD_COLUMN,
                         FILED_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(FILED_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(FILED_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(FILED_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(FILED_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         FILED_DATE
               UNION
                    SELECT
                         'COURT_HEARING' AS SOURCE_FILE_NAME,
                         'HEARING_DATE' AS LOAD_COLUMN,
                         HEARING_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(HEARING_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(HEARING_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(HEARING_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(HEARING_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_HEARING
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         HEARING_DATE
               UNION
                    SELECT
                         'COURT_SENTENCE' AS SOURCE_FILE_NAME,
                         'SENTENCE_DATE' AS LOAD_COLUMN,
                         SENTENCE_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(SENTENCE_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(SENTENCE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(SENTENCE_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(SENTENCE_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_SENTENCE
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         SENTENCE_DATE
               UNION
                    SELECT
                         'COURT_WARRANT' AS SOURCE_FILE_NAME,
                         'WARRANT_ISSUANCE_DATE' AS LOAD_COLUMN,
                         WARRANT_ISSUANCE_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(WARRANT_ISSUANCE_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_COURT_WARRANT
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         WARRANT_ISSUANCE_DATE
               UNION
                    SELECT
                         'JAIL_BOOKING' AS SOURCE_FILE_NAME,
                         'BOOKING_DATE' AS LOAD_COLUMN,
                         BOOKING_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(BOOKING_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(BOOKING_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(BOOKING_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(BOOKING_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_JAIL_BOOKING
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         BOOKING_DATE
               UNION
                    SELECT
                         'JAIL_BOOKING' AS SOURCE_FILE_NAME,
                         'ARREST_DATE' AS LOAD_COLUMN,
                         ARREST_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(ARREST_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(ARREST_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(ARREST_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(ARREST_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_JAIL_BOOKING
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         ARREST_DATE
               UNION
                    SELECT
                         'JAIL_BOOKING' AS SOURCE_FILE_NAME,
                         'RELEASE_DATE' AS LOAD_COLUMN,
                         RELEASE_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(RELEASE_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(RELEASE_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(RELEASE_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(RELEASE_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_JAIL_BOOKING
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         RELEASE_DATE
               UNION
                    SELECT
                         'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME,
                         'PRETRIAL_MONITORING_START_DATE' AS LOAD_COLUMN,
                         PRETRIAL_MONITORING_START_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(PRETRIAL_MONITORING_START_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_PRETRIAL_ASSESSMENT
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         PRETRIAL_MONITORING_START_DATE
               UNION
                    SELECT
                         'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME,
                         'PRETRIAL_TERMINATION_DATE' AS LOAD_COLUMN,
                         PRETRIAL_TERMINATION_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(PRETRIAL_TERMINATION_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_PRETRIAL_ASSESSMENT
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         PRETRIAL_TERMINATION_DATE
               UNION
                    SELECT
                         'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME,
                         'ASSESSMENT_DATE' AS LOAD_COLUMN,
                         ASSESSMENT_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(ASSESSMENT_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(ASSESSMENT_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(ASSESSMENT_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(ASSESSMENT_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_PRETRIAL_ASSESSMENT
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         ASSESSMENT_DATE
               UNION
                    SELECT
                         'PRETRIAL_VIOLATION' AS SOURCE_FILE_NAME,
                         'PRETRIAL_VIOLATION_DATE' AS LOAD_COLUMN,
                         PRETRIAL_VIOLATION_DATE AS SUBMITTED_DATE_VALUE,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE) AS STANDARDIZED_DATE_01,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH:TZM') AS STANDARDIZED_DATE_02,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS.FFTZH') AS STANDARDIZED_DATE_03,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZH:TZM') AS STANDARDIZED_DATE_04,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_05,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS TZH:TZM') AS STANDARDIZED_DATE_06,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_07,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS.FF') AS STANDARDIZED_DATE_08,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SS') AS STANDARDIZED_DATE_09,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI') AS STANDARDIZED_DATE_10,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24') AS STANDARDIZED_DATE_11,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SSTZH:TZM') AS STANDARDIZED_DATE_12,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MI:SSTZH') AS STANDARDIZED_DATE_13,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH24:MITZH:TZM') AS STANDARDIZED_DATE_14,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH24:MI:SS TZHTZM') AS STANDARDIZED_DATE_15,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF TZHTZM') AS STANDARDIZED_DATE_16,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH12:MI:SS AM TZHTZM') AS STANDARDIZED_DATE_17,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM TZHTZM') AS STANDARDIZED_DATE_18,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH24:MI:SS') AS STANDARDIZED_DATE_19,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_20,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_21,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'DY, DD MON YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_22,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY') AS STANDARDIZED_DATE_23,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH24:MI:SS.FF') AS STANDARDIZED_DATE_24,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH24:MI:SS') AS STANDARDIZED_DATE_25,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH24:MI') AS STANDARDIZED_DATE_26,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_27,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH12:MI:SS AM') AS STANDARDIZED_DATE_28,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'MM/DD/YYYY HH12:MI AM') AS STANDARDIZED_DATE_29,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH12:MI:SS.FF AM') AS STANDARDIZED_DATE_30,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH12:MI:SS AM') AS STANDARDIZED_DATE_31,
                         TRY_TO_DATE(PRETRIAL_VIOLATION_DATE,'YYYY-MM-DD HH12:MI AM') AS STANDARDIZED_DATE_32,
                         COUNT(*) AS DATE_COUNT
                    FROM
                         LOAD.LD_PRETRIAL_VIOLATION
                    WHERE
                         OPERATION_TYPE IS NULL OR
                         OPERATION_TYPE <> 'D'
                    GROUP BY
                         PRETRIAL_VIOLATION_DATE
               ) AS TempOne
          GROUP BY
               SOURCE_FILE_NAME,
               LOAD_COLUMN,
               SUBMITTED_DATE_VALUE,
               COALESCE(
                    STANDARDIZED_DATE_01,
                    STANDARDIZED_DATE_02,
                    STANDARDIZED_DATE_03,
                    STANDARDIZED_DATE_04,
                    STANDARDIZED_DATE_05,
                    STANDARDIZED_DATE_06,
                    STANDARDIZED_DATE_07,
                    STANDARDIZED_DATE_08,
                    STANDARDIZED_DATE_09,
                    STANDARDIZED_DATE_10,
                    STANDARDIZED_DATE_11,
                    STANDARDIZED_DATE_12,
                    STANDARDIZED_DATE_13,
                    STANDARDIZED_DATE_14,
                    STANDARDIZED_DATE_15,
                    STANDARDIZED_DATE_16,
                    STANDARDIZED_DATE_17,
                    STANDARDIZED_DATE_18,
                    STANDARDIZED_DATE_19,
                    STANDARDIZED_DATE_20,
                    STANDARDIZED_DATE_21,
                    STANDARDIZED_DATE_22,
                    STANDARDIZED_DATE_23,
                    STANDARDIZED_DATE_24,
                    STANDARDIZED_DATE_25,
                    STANDARDIZED_DATE_26,
                    STANDARDIZED_DATE_27,
                    STANDARDIZED_DATE_28,
                    STANDARDIZED_DATE_29,
                    STANDARDIZED_DATE_30,
                    STANDARDIZED_DATE_31,
                    STANDARDIZED_DATE_32 
               )  
          ) AS TempTwo
          GROUP BY
               SOURCE_FILE_NAME,
               LOAD_COLUMN,
               LEFT(
                    SUBMITTED_DATE_VALUE,
                    10
               ),
               STANDARDIZED_DATE,
               CASE
                    WHEN STANDARDIZED_DATE IS NOT NULL
                        THEN 'Yes'
                    ELSE 'No'
               END,
               CASE
                    WHEN STANDARDIZED_DATE < '2018-01-01' OR 
                    STANDARDIZED_DATE > '2022-12-31' THEN 'Yes'
                    ELSE 'No'
               END,
               CASE
                    WHEN LEFT(
                         SUBMITTED_DATE_VALUE,
                         10
                    ) IS NULL THEN 'Yes'
                    ELSE 'No'
               END,
               CASE
                    WHEN STANDARDIZED_DATE IS NULL
                    AND LEFT(
                         SUBMITTED_DATE_VALUE,
                         10
                    ) IS NOT NULL THEN 'Yes'
                    ELSE 'No'
               END
     ) AS TempThree
WHERE
     SUBMITTED_DATE_VALUE_FIRST_10 IS NOT NULL
GROUP BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     CASE
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'No' THEN '*Valid Dates*'
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'Yes' THEN '*Out of Range Dates*'
          ELSE SUBMITTED_DATE_VALUE_FIRST_10
     END,
     CASE
          WHEN VALID_DATE = 'Yes' AND VALID_DATE_OUT_OF_RANGE = 'No' THEN 'Pass'
          ELSE 'Fail'
     END
     ) AS TempFour
     ) AS TempFive
WHERE RNK <=10

ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     TEST_RESULT,
     DATE_COUNT DESC,
     SUBMITTED_DATE DESC;










/********************************************************************************/
/********************************************************************************/
/********************* JCC Standardized Column Tests ****************************/
/********************************************************************************/
/********************************************************************************/

/************************************************/ 
/***** CREATE PUBLIC.PRETRIAL_COLUMN_CHECKS *****/
/************************************************/ 
     
CREATE OR REPLACE
TEMPORARY TABLE PUBLIC.PRETRIAL_JCC_STD_VALUES (
     SOURCE_FILE_NAME VARCHAR,
     LOAD_COLUMN VARCHAR,
     LOAD_COLUMN_TRIMMED VARCHAR,
     JCC_STANDARDIZED_COLUMN VARCHAR,
     COLUMN_VALUE VARCHAR,
     JCC_STD_COLUMN_VALUE VARCHAR,
     RECORD_CNT NUMBER
);

/**********************************************************/ 
/***** Script to Create Standard Column Check Queries *****/
/**********************************************************/ 
SELECT
     Source_File_Name,
     Load_Column,
     GENERATED_QUERY
FROM
(
SELECT
     Source_File_Name,
     Load_Column,
     'SELECT ' || '''' || Source_File_Name || '''' || ' AS SOURCE_FILE_NAME, '
     || '''' || Load_Column || '''' || ' AS LOAD_COLUMN, '
     || '''' || JCC_Standarized_Column || '''' || 
     ' AS JCC_STANDARDIZED_COLUMN, ' || Load_Column || ' AS COLUMN_VALUE, ' || JCC_Standarized_Column || ' AS JCC_STD_COLUMN_VALUE, ' ||
     ' COUNT(*) AS RECORD_CNT FROM '
     || Load_Schema_with_Table ||
     ' WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> ''D'' ) GROUP BY ' || Load_Column || ', ' || JCC_Standarized_Column ||
     ' UNION' AS GENERATED_QUERY
FROM
     (
          SELECT
               Source_File_Name,
               Load_Column,
               CASE
                   WHEN Load_Column LIKE '%_CHARGE_CODE' THEN 'CHARGE_CODE'
                   WHEN Load_Column LIKE '%_CHARGE_LEVEL' THEN 'CHARGE_LEVEL'
                   ELSE Load_Column
               END AS LOAD_COLUMN_TRIMMED,
               Load_Schema_with_Table,
               JCC_Standarized_Column,
               OPERATION_TYPE_USE
          FROM
               PUBLIC.PRETRIAL_COLUMN_NAMES
          WHERE
               JCC_Standarized_Column <> 'None'
     ) AS a
WHERE
     OPERATION_TYPE_USE = 'OPERATION_TYPE_Column_Is_Used'
UNION
SELECT
     Source_File_Name,
     Load_Column,
     'SELECT ' || '''' || Source_File_Name || '''' || ' AS SOURCE_FILE_NAME, '
     || '''' || Load_Column || '''' || ' AS LOAD_COLUMN, '
     || '''' || JCC_Standarized_Column || '''' || 
     ' AS JCC_STANDARDIZED_COLUMN, ' || Load_Column || ' AS COLUMN_VALUE, ' || JCC_Standarized_Column || ' AS JCC_STD_COLUMN_VALUE, ' ||
     ' COUNT(*) AS RECORD_CNT FROM '
     || Load_Schema_with_Table || ' GROUP BY ' || Load_Column || ', ' || JCC_Standarized_Column ||
     ' UNION' AS GENERATED_QUERY
FROM
     (
          SELECT
               Source_File_Name,
               Load_Column,
               CASE
                   WHEN Load_Column LIKE '%_CHARGE_CODE' THEN 'CHARGE_CODE'
                   WHEN Load_Column LIKE '%_CHARGE_LEVEL' THEN 'CHARGE_LEVEL'
                   ELSE Load_Column
               END AS LOAD_COLUMN_TRIMMED,
               Load_Schema_with_Table,
               JCC_Standarized_Column,
               OPERATION_TYPE_USE
          FROM
               PUBLIC.PRETRIAL_COLUMN_NAMES
          WHERE
               JCC_Standarized_Column <> 'None'
     ) AS b
WHERE
     OPERATION_TYPE_USE <> 'OPERATION_TYPE_Column_Is_Used'
) AS c
GROUP BY 
     Source_File_Name,
     Load_Column,
     GENERATED_QUERY
ORDER BY
     Source_File_Name,
     Load_Column,
     GENERATED_QUERY
     
/**********************************************/ 
/***** LOAD PUBLIC.PRETRIAL_COLUMN_CHECKS *****/
/**********************************************/ 
INSERT INTO PUBLIC.PRETRIAL_JCC_STD_VALUES
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     CASE
          WHEN Load_Column LIKE '%_CHARGE_CODE' THEN 'CHARGE_CODE'
          WHEN Load_Column LIKE '%_CHARGE_LEVEL' THEN 'CHARGE_LEVEL'
          ELSE Load_Column
     END AS LOAD_COLUMN_TRIMMED,
     JCC_STANDARDIZED_COLUMN,
     COLUMN_VALUE,
     JCC_STD_COLUMN_VALUE,
     RECORD_CNT
FROM
(SELECT 'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME, 'PLEA_TYPE' AS LOAD_COLUMN, 'PLEA_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, PLEA_TYPE AS COLUMN_VALUE, PLEA_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_CASE_CHARGE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY PLEA_TYPE, PLEA_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'DISPOSITION_TYPE' AS LOAD_COLUMN, 'DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, DISPOSITION_TYPE AS COLUMN_VALUE, DISPOSITION_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY DISPOSITION_TYPE, DISPOSITION_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_CHARGE_DISPOSITION' AS SOURCE_FILE_NAME, 'SUB_DISPOSITION_TYPE' AS LOAD_COLUMN, 'SUB_DISPOSITION_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, SUB_DISPOSITION_TYPE AS COLUMN_VALUE, SUB_DISPOSITION_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_CHARGE_DISPOSITION WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY SUB_DISPOSITION_TYPE, SUB_DISPOSITION_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'CASE_STATUS' AS LOAD_COLUMN, 'CASE_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, CASE_STATUS AS COLUMN_VALUE, CASE_STATUS_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY CASE_STATUS, CASE_STATUS_JCC_STANDARDIZED UNION
SELECT 'COURT_CRIMINAL_CASE_DEFENDANT' AS SOURCE_FILE_NAME, 'REPRESENTATION_STATUS' AS LOAD_COLUMN, 'REPRESENTATION_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, REPRESENTATION_STATUS AS COLUMN_VALUE, REPRESENTATION_STATUS_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_CRIMINAL_CASE_DEFENDANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY REPRESENTATION_STATUS, REPRESENTATION_STATUS_JCC_STANDARDIZED UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'COURT_RELEASE_DECISION' AS LOAD_COLUMN, 'COURT_RELEASE_DECISION_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, COURT_RELEASE_DECISION AS COLUMN_VALUE, COURT_RELEASE_DECISION_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY COURT_RELEASE_DECISION, COURT_RELEASE_DECISION_JCC_STANDARDIZED UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'COURT_RELEASE_TYPE' AS LOAD_COLUMN, 'COURT_RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, COURT_RELEASE_TYPE AS COLUMN_VALUE, COURT_RELEASE_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY COURT_RELEASE_TYPE, COURT_RELEASE_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'HEARING_RESULT' AS LOAD_COLUMN, 'HEARING_RESULT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, HEARING_RESULT AS COLUMN_VALUE, HEARING_RESULT_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY HEARING_RESULT, HEARING_RESULT_JCC_STANDARDIZED UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'HEARING_STATUS' AS LOAD_COLUMN, 'HEARING_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, HEARING_STATUS AS COLUMN_VALUE, HEARING_STATUS_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY HEARING_STATUS, HEARING_STATUS_JCC_STANDARDIZED UNION
SELECT 'COURT_HEARING' AS SOURCE_FILE_NAME, 'HEARING_TYPE' AS LOAD_COLUMN, 'HEARING_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, HEARING_TYPE AS COLUMN_VALUE, HEARING_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_HEARING WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY HEARING_TYPE, HEARING_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'ETHNICITY' AS LOAD_COLUMN, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, ETHNICITY AS COLUMN_VALUE, ETHNICITY_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY ETHNICITY, ETHNICITY_JCC_STANDARDIZED UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LANGUAGE' AS LOAD_COLUMN, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, LANGUAGE AS COLUMN_VALUE, LANGUAGE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY LANGUAGE, LANGUAGE_JCC_STANDARDIZED UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'RACE' AS LOAD_COLUMN, 'RACE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RACE AS COLUMN_VALUE, RACE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY RACE, RACE_JCC_STANDARDIZED UNION
SELECT 'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME, 'SEX' AS LOAD_COLUMN, 'SEX_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, SEX AS COLUMN_VALUE, SEX_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_INDIVIDUAL WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY SEX, SEX_JCC_STANDARDIZED UNION
SELECT 'COURT_SENTENCE' AS SOURCE_FILE_NAME, 'SENTENCE_TYPE' AS LOAD_COLUMN, 'SENTENCE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, SENTENCE_TYPE AS COLUMN_VALUE, SENTENCE_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_SENTENCE WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY SENTENCE_TYPE, SENTENCE_TYPE_JCC_STANDARDIZED UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'WARRANT_REASON' AS LOAD_COLUMN, 'WARRANT_REASON_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, WARRANT_REASON AS COLUMN_VALUE, WARRANT_REASON_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY WARRANT_REASON, WARRANT_REASON_JCC_STANDARDIZED UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'WARRANT_STATUS' AS LOAD_COLUMN, 'WARRANT_STATUS_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, WARRANT_STATUS AS COLUMN_VALUE, WARRANT_STATUS_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY WARRANT_STATUS, WARRANT_STATUS_JCC_STANDARDIZED UNION
SELECT 'COURT_WARRANT' AS SOURCE_FILE_NAME, 'WARRANT_TYPE' AS LOAD_COLUMN, 'WARRANT_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, WARRANT_TYPE AS COLUMN_VALUE, WARRANT_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_COURT_WARRANT WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' ) GROUP BY WARRANT_TYPE, WARRANT_TYPE_JCC_STANDARDIZED UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'BOOKING_TYPE' AS LOAD_COLUMN, 'BOOKING_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, BOOKING_TYPE AS COLUMN_VALUE, BOOKING_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_BOOKING GROUP BY BOOKING_TYPE, BOOKING_TYPE_JCC_STANDARDIZED UNION
SELECT 'JAIL_BOOKING' AS SOURCE_FILE_NAME, 'RELEASE_TYPE' AS LOAD_COLUMN, 'RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RELEASE_TYPE AS COLUMN_VALUE, RELEASE_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_BOOKING GROUP BY RELEASE_TYPE, RELEASE_TYPE_JCC_STANDARDIZED UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'BOOKING_CHARGE_CODE' AS LOAD_COLUMN, 'BOOKING_CHARGE_CODE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, BOOKING_CHARGE_CODE AS COLUMN_VALUE, BOOKING_CHARGE_CODE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE GROUP BY BOOKING_CHARGE_CODE, BOOKING_CHARGE_CODE_JCC_STANDARDIZED UNION
SELECT 'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME, 'BOOKING_CHARGE_LEVEL' AS LOAD_COLUMN, 'BOOKING_CHARGE_LEVEL_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, BOOKING_CHARGE_LEVEL AS COLUMN_VALUE, BOOKING_CHARGE_LEVEL_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_BOOKING_CHARGE GROUP BY BOOKING_CHARGE_LEVEL, BOOKING_CHARGE_LEVEL_JCC_STANDARDIZED UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'ETHNICITY' AS LOAD_COLUMN, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, ETHNICITY AS COLUMN_VALUE, ETHNICITY_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_INDIVIDUAL GROUP BY ETHNICITY, ETHNICITY_JCC_STANDARDIZED UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LANGUAGE' AS LOAD_COLUMN, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, LANGUAGE AS COLUMN_VALUE, LANGUAGE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_INDIVIDUAL GROUP BY LANGUAGE, LANGUAGE_JCC_STANDARDIZED UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'RACE' AS LOAD_COLUMN, 'RACE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RACE AS COLUMN_VALUE, RACE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_INDIVIDUAL GROUP BY RACE, RACE_JCC_STANDARDIZED UNION
SELECT 'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'SEX' AS LOAD_COLUMN, 'SEX_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, SEX AS COLUMN_VALUE, SEX_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_JAIL_INDIVIDUAL GROUP BY SEX, SEX_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'PRETRIAL_RELEASE_TYPE' AS LOAD_COLUMN, 'PRETRIAL_RELEASE_TYPE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, PRETRIAL_RELEASE_TYPE AS COLUMN_VALUE, PRETRIAL_RELEASE_TYPE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY PRETRIAL_RELEASE_TYPE, PRETRIAL_RELEASE_TYPE_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'PRETRIAL_TERMINATION_OUTCOME' AS LOAD_COLUMN, 'PRETRIAL_TERMINATION_OUTCOME_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, PRETRIAL_TERMINATION_OUTCOME AS COLUMN_VALUE, PRETRIAL_TERMINATION_OUTCOME_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY PRETRIAL_TERMINATION_OUTCOME, PRETRIAL_TERMINATION_OUTCOME_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'PRETRIAL_TERMINATION_REASON' AS LOAD_COLUMN, 'PRETRIAL_TERMINATION_REASON_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, PRETRIAL_TERMINATION_REASON AS COLUMN_VALUE, PRETRIAL_TERMINATION_REASON_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY PRETRIAL_TERMINATION_REASON, PRETRIAL_TERMINATION_REASON_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'RELEASE_AUTHORIZATION' AS LOAD_COLUMN, 'RELEASE_AUTHORIZATION_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RELEASE_AUTHORIZATION AS COLUMN_VALUE, RELEASE_AUTHORIZATION_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY RELEASE_AUTHORIZATION, RELEASE_AUTHORIZATION_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'RELEASE_DECISION_ARRAIGNMENT' AS LOAD_COLUMN, 'RELEASE_DECISION_ARRAIGNMENT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RELEASE_DECISION_ARRAIGNMENT AS COLUMN_VALUE, RELEASE_DECISION_ARRAIGNMENT_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY RELEASE_DECISION_ARRAIGNMENT, RELEASE_DECISION_ARRAIGNMENT_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'RELEASE_DECISION_PREARRAIGNMENT' AS LOAD_COLUMN, 'RELEASE_DECISION_PREARRAIGNMENT_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RELEASE_DECISION_PREARRAIGNMENT AS COLUMN_VALUE, RELEASE_DECISION_PREARRAIGNMENT_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY RELEASE_DECISION_PREARRAIGNMENT, RELEASE_DECISION_PREARRAIGNMENT_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_ASSESSMENT' AS SOURCE_FILE_NAME, 'RELEASE_RECOMMENDATION' AS LOAD_COLUMN, 'RELEASE_RECOMMENDATION_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RELEASE_RECOMMENDATION AS COLUMN_VALUE, RELEASE_RECOMMENDATION_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_ASSESSMENT GROUP BY RELEASE_RECOMMENDATION, RELEASE_RECOMMENDATION_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'ETHNICITY' AS LOAD_COLUMN, 'ETHNICITY_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, ETHNICITY AS COLUMN_VALUE, ETHNICITY_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL GROUP BY ETHNICITY, ETHNICITY_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'LANGUAGE' AS LOAD_COLUMN, 'LANGUAGE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, LANGUAGE AS COLUMN_VALUE, LANGUAGE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL GROUP BY LANGUAGE, LANGUAGE_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'RACE' AS LOAD_COLUMN, 'RACE_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, RACE AS COLUMN_VALUE, RACE_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL GROUP BY RACE, RACE_JCC_STANDARDIZED UNION
SELECT 'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME, 'SEX' AS LOAD_COLUMN, 'SEX_JCC_STANDARDIZED' AS JCC_STANDARDIZED_COLUMN, SEX AS COLUMN_VALUE, SEX_JCC_STANDARDIZED AS JCC_STD_COLUMN_VALUE,  COUNT(*) AS RECORD_CNT FROM LOAD.LD_PRETRIAL_INDIVIDUAL GROUP BY SEX, SEX_JCC_STANDARDIZED
) AS a
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     CASE
          WHEN Load_Column LIKE '%_CHARGE_CODE' THEN 'CHARGE_CODE'
          WHEN Load_Column LIKE '%_CHARGE_LEVEL' THEN 'CHARGE_LEVEL'
          ELSE Load_Column
     END,
     JCC_STANDARDIZED_COLUMN,
     COLUMN_VALUE,
     JCC_STD_COLUMN_VALUE,
     RECORD_CNT;

/*********************************************************/ 
/***** Script to get JCC Standardized Column Results *****/
    
SELECT *
FROM PUBLIC.PRETRIAL_JCC_STD_VALUES;
/*********************************************************/ 
SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     JCC_STANDARDIZED_COLUMN,
     CASE WHEN LENGTH(COLUMN_VALUE) > 50 THEN LEFT(COLUMN_VALUE,50) || '[...]' ELSE COLUMN_VALUE END AS COLUMN_VALUE,
     CASE WHEN LENGTH(JCC_STD_COLUMN_VALUE) > 50 THEN LEFT(JCC_STD_COLUMN_VALUE,50) || '[...]' ELSE JCC_STD_COLUMN_VALUE END AS JCC_STD_COLUMN_VALUE,
     RECORD_CNT,
     CASE WHEN REF_STANDARD_VALUE IS NULL THEN 'Non-Standardized Value' ELSE 'Pass' END AS TEST_RESULT 
FROM
     (
          SELECT
               SOURCE_FILE_NAME,
               LOAD_COLUMN,
               LOAD_COLUMN_TRIMMED,
               JCC_STANDARDIZED_COLUMN,
               COLUMN_VALUE,
               JCC_STD_COLUMN_VALUE,
               REF_STANDARD_VALUE,
               RECORD_CNT,
               RANK() OVER (
                    PARTITION BY SOURCE_FILE_NAME,
                    LOAD_COLUMN,
                    LOAD_COLUMN_TRIMMED,
                    JCC_STANDARDIZED_COLUMN
               ORDER BY
                    RECORD_CNT DESC
               ) AS RNK
          FROM
               (
                    SELECT
                         SOURCE_FILE_NAME,
                         LOAD_COLUMN,
                         LOAD_COLUMN_TRIMMED,
                         JCC_STANDARDIZED_COLUMN,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN COLUMN_VALUE  -- added code TO find undefined values
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE COLUMN_VALUE
                         END AS COLUMN_VALUE,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN JCC_STD_COLUMN_VALUE -- added code TO find undefined values
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE JCC_STD_COLUMN_VALUE
                         END AS JCC_STD_COLUMN_VALUE,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN REF_STANDARD_VALUE -- added code TO find undefined values
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE REF_STANDARD_VALUE
                         END AS REF_STANDARD_VALUE,
                         SUM(RECORD_CNT) AS RECORD_CNT
                    FROM
                         (
                              SELECT
                                   a.SOURCE_FILE_NAME,
                                   a.LOAD_COLUMN,
                                   a.LOAD_COLUMN_TRIMMED,
                                   a.JCC_STANDARDIZED_COLUMN,
                                   a.COLUMN_VALUE,
                                   a.JCC_STD_COLUMN_VALUE,
                                   a.RECORD_CNT,
                                   b.REF_STANDARD_VALUE
                              FROM
                                   PUBLIC.PRETRIAL_JCC_STD_VALUES AS a
                              LEFT OUTER JOIN (
                                        SELECT
                                             UPPER(REF_COLUMN_NAME) AS REF_COLUMN_NAME,
                                             REF_STANDARD_VALUE
                                        FROM
                                             LOAD.LD_REF_STANDARD_VALUE
                                        GROUP BY
                                             UPPER(REF_COLUMN_NAME),
                                             REF_STANDARD_VALUE
                                   ) AS b ON
                                   a.LOAD_COLUMN_TRIMMED = b.REF_COLUMN_NAME
                                   AND a.JCC_STD_COLUMN_VALUE = b.REF_STANDARD_VALUE
                              WHERE
                                   COALESCE(
                                        a.COLUMN_VALUE,
                                        a.JCC_STD_COLUMN_VALUE
                                   ) IS NOT NULL
                         ) AS c
                    GROUP BY
                         SOURCE_FILE_NAME,
                         LOAD_COLUMN,
                         LOAD_COLUMN_TRIMMED,
                         JCC_STANDARDIZED_COLUMN,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN COLUMN_VALUE
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE COLUMN_VALUE
                         END,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN JCC_STD_COLUMN_VALUE
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE JCC_STD_COLUMN_VALUE
                         END,
                         CASE
                              WHEN JCC_STD_COLUMN_VALUE = 'Undefined' THEN REF_STANDARD_VALUE
	                          WHEN JCC_STD_COLUMN_VALUE = REF_STANDARD_VALUE THEN '*Valid Values*'
                              ELSE REF_STANDARD_VALUE
                         END
               ) AS D
          WHERE
               COLUMN_VALUE <> '*Valid Values*'
     ) AS e
WHERE
     RNK <= 10
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     JCC_STANDARDIZED_COLUMN,
     RECORD_CNT DESC,
     COLUMN_VALUE,
     JCC_STD_COLUMN_VALUE;

/********************************************************************************/
/********************************************************************************/
/************************** NULL CII Value Tests ********************************/
/********************************************************************************/
/********************************************************************************/

/*********************************************************/ 
/***** Script to get NULL CII Values Testing Results *****/
/*********************************************************/      

SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     RECORD_CNT,
     DISTINCT_VALUES,
     NULL_CNT,
     CAST((NULL_CNT / RECORD_CNT ) * 100.0000 AS NUMBER(38,2)) AS PCT_NULL,
     CASE
          WHEN CAST((NULL_CNT / RECORD_CNT ) * 100.0000 AS NUMBER(38,2)) < 10 THEN 'Pass'
          ELSE 'High % NULL'
     END AS TEST_RESULT
FROM
     (
          SELECT
               'COURT_INDIVIDUAL' AS SOURCE_FILE_NAME,
               'CII' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT CII) AS DISTINCT_VALUES,
               SUM(CASE WHEN CII IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_INDIVIDUAL
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
          
     UNION
          SELECT
               'JAIL_INDIVIDUAL' AS SOURCE_FILE_NAME,
               'CII' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT CII) AS DISTINCT_VALUES,
               SUM(CASE WHEN CII IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_INDIVIDUAL
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'PRETRIAL_INDIVIDUAL' AS SOURCE_FILE_NAME,
               'CII' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT CII) AS DISTINCT_VALUES,
               SUM(CASE WHEN CII IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_PRETRIAL_INDIVIDUAL
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     ) AS TempOne
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN;
     
/********************************************************************************/
/********************************************************************************/
/************************* NULL Charge Data Tests *******************************/
/********************************************************************************/
/********************************************************************************/

/*********************************************************/ 
/***** Script to get NULL CII Values Testing Results *****/
/*********************************************************/  

SELECT
     SOURCE_FILE_NAME,
     LOAD_COLUMN,
     RECORD_CNT,
     DISTINCT_VALUES,
     NULL_CNT,
     CAST((NULL_CNT / RECORD_CNT ) * 100.0000 AS NUMBER(38,2)) AS PCT_NULL,
     CASE
          WHEN NULL_CNT = 0 THEN 'Pass'
          ELSE 'High % NULL'
     END AS TEST_RESULT
FROM
     (
          SELECT
               'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME,
               'COURT_CHARGE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT COURT_CHARGE) AS DISTINCT_VALUES,
               SUM(CASE WHEN COURT_CHARGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )         
     UNION
          SELECT
               'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME,
               'COURT_CHARGE_CODE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT COURT_CHARGE_CODE) AS DISTINCT_VALUES,
               SUM(CASE WHEN COURT_CHARGE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME,
               'COURT_CHARGE_HIERARCHY' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT COURT_CHARGE_HIERARCHY) AS DISTINCT_VALUES,
               SUM(CASE WHEN COURT_CHARGE_HIERARCHY IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'COURT_CASE_CHARGE' AS SOURCE_FILE_NAME,
               'COURT_CHARGE_LEVEL' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT COURT_CHARGE_LEVEL) AS DISTINCT_VALUES,
               SUM(CASE WHEN COURT_CHARGE_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_COURT_CASE_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME,
               'BOOKING_CHARGE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT BOOKING_CHARGE) AS DISTINCT_VALUES,
               SUM(CASE WHEN BOOKING_CHARGE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_BOOKING_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME,
               'BOOKING_CHARGE_CODE' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT BOOKING_CHARGE_CODE) AS DISTINCT_VALUES,
               SUM(CASE WHEN BOOKING_CHARGE_CODE IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_BOOKING_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     UNION
          SELECT
               'JAIL_BOOKING_CHARGE' AS SOURCE_FILE_NAME,
               'BOOKING_CHARGE_LEVEL' AS LOAD_COLUMN,
               COUNT(*) AS RECORD_CNT,
               COUNT(DISTINCT BOOKING_CHARGE_LEVEL) AS DISTINCT_VALUES,
               SUM(CASE WHEN BOOKING_CHARGE_LEVEL IS NULL THEN 1 ELSE 0 END) AS NULL_CNT
          FROM
               LOAD.LD_JAIL_BOOKING_CHARGE
          WHERE ( OPERATION_TYPE IS NULL OR OPERATION_TYPE <> 'D' )
     ) AS TempOne
ORDER BY
     SOURCE_FILE_NAME,
     LOAD_COLUMN;

/********************************************************************************/
/********************************************************************************/
/********************************************************************************/
/********************************************************************************/
/********************************************************************************/



